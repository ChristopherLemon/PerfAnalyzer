#!/usr/bin/perl -w
#
# stackcolllapse-perf.pl	collapse perf samples into single lines.
#
# Parses a list of multiline stacks generated by "perf script", and
# outputs a semicolon separated stack followed by a space and a count.
# If memory addresses (+0xd) are present, they are stripped, and resulting
# identical stacks are colased with their counts summed.
#
# USAGE: ./stackcollapse-perf.pl [options] infile > outfile
#
# Run "./stackcollapse-perf.pl -h" to list options.
#
# Example input:
#
#  swapper     0 [000] 158665.570607: cpu-clock:
#         ffffffff8103ce3b native_safe_halt ([kernel.kallsyms])
#         ffffffff8101c6a3 default_idle ([kernel.kallsyms])
#         ffffffff81013236 cpu_idle ([kernel.kallsyms])
#         ffffffff815bf03e rest_init ([kernel.kallsyms])
#         ffffffff81aebbfe start_kernel ([kernel.kallsyms].init.text)
#  [...]
#
# Example output:
#
#  swapper;start_kernel;rest_init;cpu_idle;default_idle;native_safe_halt 1
#
# Input may be created and processed using:
#
#  perf record -a -g -F 997 sleep 60
#  perf script | ./stackcollapse-perf.pl > out.stacks-folded
#
# The output of "perf script" should include stack traces. If these are missing
# for you, try manually selecting the perf script output; eg:
#
#  perf script -f comm,pid,tid,cpu,time,event,ip,sym,dso,trace | ...
#
# This is also required for the --pid or --tid options, so that the output has
# both the PID and TID.
#
# Copyright 2012 Joyent, Inc.  All rights reserved.
# Copyright 2012 Brendan Gregg.  All rights reserved.
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at docs/cddl1.txt or
# http://opensource.org/licenses/CDDL-1.0.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at docs/cddl1.txt.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# 02-Mar-2012	Brendan Gregg	Created this.
# 02-Jul-2014	   "	  "	Added process name to stacks.

use strict;
use Getopt::Long;

my %collapsed;
my %files;
my %previous_stacks;
my %samples;
my %entry_times;
my %exit_times;
my @trace_buffer;
my %event_sample;
my %call_counts;
my %order;

my $nlines = 0;

my $annotate_kernel = 0; # put an annotation on kernel function
my $include_pname = 1;	# include process names in stacks
my $include_pid = 0;	# include process ID with process name
my $include_tid = 0;	# include process & thread ID with process name
my $accumulate = 0;
my $trace_event = "";
my $multiplier = 1;
my $tidy_java = 1;	# condense Java signatures
my $tidy_generic = 1;	# clean up function names a little
my $target_pname;	# target process name from perf invocation
my $primary_event = "xxx";
my $period = 1;
my $time = 0.0;
my $start_time = -1.0;
my $previous_time = 0.0;
my $dt = 0.1;
my $nt = 0;
my $file_counter = -1;
my $output_file = "";

my $show_inline = 0;
my $show_context = 0;
GetOptions('inline' => \$show_inline,
           'context' => \$show_context,
           'pid' => \$include_pid,
           'kernel' => \$annotate_kernel,
           'tid' => \$include_tid,
           'dt=f' => \$dt,
           'accumulate' => \$accumulate,
           'trace_event=s' => \$trace_event,
           'output_file=s' => \$output_file,
           'multiplier=i' => \$multiplier)
or die <<USAGE_END;
USAGE: $0 [options] infile > outfile\n
	--pid		# include PID with process names [1]
	--tid		# include TID and PID with process names [1]
	--inline	# un-inline using addr2line
	--kernel	# annotate kernel functions with a _[k]
	--context	# adds source context to --inline\n
[1] perf script must emit both PID and TIDs for these to work; eg:
	perf script -f comm,pid,tid,cpu,time,event,ip,sym,dso,trace
USAGE_END

sub remember_stack {
	my ($primary_event,$stack, $count) = @_;
    if (not exists $collapsed{$primary_event}{$stack}) {
		if (not exists $order{$primary_event}) {
			$order{$primary_event} = ();
		}
	    push @{$order{$primary_event}}, $stack;
	}
	$collapsed{$primary_event}{$stack} += $count;
}

sub record_trace {
    my ($primary_event,$stack,$exe_name,$pid,$tid,$elapsed_time) = @_;
    $nlines++;
    if ($primary_event eq $trace_event) {
        my $id = $pid . "-" . $tid;
        if (not exists $previous_stacks{$id}) {
            $previous_stacks{$id} = "";
            $samples{$id} = "";
        }
        if ($previous_stacks{$id} eq $stack) {
            $samples{$id} = $samples{$id} . " " . $elapsed_time;
        } else {
            my $last_trace = $previous_stacks{$id} . " " . $samples{$id};
            push @trace_buffer, $last_trace;
            dump_trace(0);
            $samples{$id} = $elapsed_time;
            $previous_stacks{$id} = $stack;
        }
    }
    else {
        my $id = $exe_name . "-" .$pid . "/" . $tid . ":" . $primary_event;
        if (not exists $event_sample{$id}) {
            $event_sample{$id} = "";
        }
        $event_sample{$id} = $event_sample{$id} . " " . $elapsed_time;
    }
}

sub dump_trace {
    my ($finalise) = @_;
    if ($#trace_buffer>100 or $finalise == 1) {
        my $opp = '';
        my $filename = "$output_file\_trace-$trace_event";
        if (exists $files{$filename}) {
            $opp = '>>';
        }
        else {
            $opp = '>';
            $files{$filename} = 1;
        }
        open(my $fh, $opp, $filename) or die;
        if( $opp eq '>') {
            print $fh "start-time;$start_time\n";
        }
        for my $k (@trace_buffer) {
            print $fh "$k\n";
        }
        for my $id (keys %event_sample) {
            print $fh "secondary-event;$id:$event_sample{$id}\n";
        }
        close($fh);
		undef @trace_buffer;
		%event_sample = ();
    }
}

# for the --inline option
sub inline {
	my ($pc, $mod) = @_;

	# capture addr2line output
	my $a2l_output = `addr2line -a $pc -e $mod -i -f -s -C`;

	# remove first line
	$a2l_output =~ s/^(.*\n){1}//;

	my @fullfunc;
	my $one_item = "";
	for (split /^/, $a2l_output) {
		chomp $_;

		# remove discriminator info if exists
		$_ =~ s/ \(discriminator \S+\)//;

		if ($one_item eq "") {
			$one_item = $_;
		} else {
			if ($show_context == 1) {
				unshift @fullfunc, $one_item . ":$_";
			} else {
				unshift @fullfunc, $one_item;
			}
			$one_item = "";
		}
	}

	return join(";", @fullfunc);
}

my @stack;
my $pname;
my $pname_sum_threads;
my $pname_sum_processes;
my $exe_name;
my $m_pid;
my $m_tid;
my $m_cid;


$m_cid = "";

#
# Main loop
#
while (defined($_ = <>)) {

	# find the name of the process launched by perf, by stepping backwards
	# over the args to find the first non-option (no dash):
	if (/^# cmdline/) {
		my @args = split ' ', $_;
		foreach my $arg (reverse @args) {
			if ($arg !~ /^-/) {
				$target_pname = $arg;
				$target_pname =~ s:.*/::;  # strip pathname
				last;
			}
		}
	}

	# skip remaining comments
	next if m/^#/;
	chomp;

	# end of stack. save cached data.
	if (m/^$/) {
		if ($include_pname) {
			if (defined $pname) {
				unshift @stack, $pname;
			} else {
				unshift @stack, "";
			}
		}
        if ($trace_event ne "") {
            record_trace($primary_event,join(";", @stack), $exe_name, $m_pid, $m_tid, $time - $start_time) if @stack;
        } else {
		    remember_stack($primary_event,join(";", @stack), $period) if @stack;
        }
        if ($accumulate) {
            splice(@stack, 0, 1, $pname_sum_threads);
            if ($trace_event ne "") {
                record_trace($primary_event,join(";", @stack), $exe_name,  $m_pid, "all", $time - $start_time) if @stack;
            } else {
			    remember_stack($primary_event,join(";", @stack), $period) if @stack;
            }
            splice(@stack, 0, 1, $pname_sum_processes);
            if ($trace_event ne "") {
                record_trace($primary_event,join(";", @stack), $exe_name,  "all", "all", $time - $start_time) if @stack;
            } else {
                remember_stack($primary_event,join(";", @stack), $period) if @stack;
            }
        }

		undef @stack;
		undef $pname;
		undef $pname_sum_threads;
		undef $pname_sum_processes;
		next;
	}

    # Timestamps
    if (m/(\d+\.\d+):/) {
        $time = $1;
        if( $start_time<0 ) {
        	$start_time=$time;
        	$previous_time=$time;
        }
        if ( $time-$previous_time>$dt ) {
            $previous_time = $time;
            dump_stacks();
        }
    }

    # Core number ... [xxx] ...
    if (m/\s+\[(\d+)\]\s+/) {
        $m_cid = $1;
        $m_cid =~ s/^0+//g;
		if ($m_cid eq "") {
			$m_cid = "0";
		}
    }

	# event record start
    # exe ... pid/tid ... time: ... (period?) ... event: ...
	if (/^(\S.+?)\s+(\d+)\/*(\d+)*\s+([^:]+):\s*(?:(\d+)\s+)?([^\s]+):\s*/) {
		# default "perf script" output has TID but not PID
		# eg, "java 25607 4794564.109216: cycles:"
		# eg, "java 12688 [002] 6544038.708352: cpu-clock:"
		# eg, "V8 WorkerThread 25607 4794564.109216: cycles:"
		# eg, "java 24636/25607 [000] 4794564.109216: cycles:"
		# eg, "java 12688/12764 6544038.708352: cpu-clock:"
		# eg, "V8 WorkerThread 24636/25607 [000] 94564.109216: cycles:"
		# other combinations possible
		$exe_name = $1;
        $primary_event = $6;
        if ($5) {
            $period = $5;
        } else {
            $period = $multiplier;
        }
		if ($3) {
			($m_pid, $m_tid) = ($2, $3);
		} else {
			($m_pid, $m_tid) = ("?", $2);
		}

		if ($accumulate && $m_cid ne "" ) {
		    $m_pid = $m_cid;
		}

		if ($include_tid) {
			$pname = "$1-$m_pid/$m_tid";
			$pname_sum_threads = "$1-$m_pid/all";
			$pname_sum_processes = "$1-all/all";
		} elsif ($include_pid) {
			$pname = "$1-$m_pid";
		} else {
			$pname = $1;
		}
		$pname =~ tr/ /_/;

		# stack line
	} elsif (/^\s*(\w+)\s*(.+) \((\S*)\)/) {
       #  print "vars2: $event_to_match,$matched_event\n";
		my ($pc, $rawfunc, $mod) = ($1, $2, $3);

		# detect kernel from the module name; eg, frames to parse include:
		#          ffffffff8103ce3b native_safe_halt ([kernel.kallsyms])
		#          8c3453 tcp_sendmsg (/lib/modules/4.3.0-rc1-virtual/build/vmlinux)
		$rawfunc.="_[k]" if ($annotate_kernel == 1 && $mod =~ m/(kernel\.|vmlinux$)/);

		if ($show_inline == 1 && $mod !~ m/(perf-\d+.map|kernel\.|\[[^\]]+\])/) {
			unshift @stack, inline($pc, $mod);
			next;
		}

		next if $rawfunc =~ /^\(/;		# skip process names

		my @inline;
		for (split /\->/, $rawfunc) {
			my $func = $_;

			if ($func eq "[unknown]" && $mod ne "[unknown]") { # use module name instead, if known
				$func = $mod;
				$func =~ s/.*\///;
				$func = "\[$func\]";
			}

			if ($tidy_generic) {
				$func =~ s/;/:/g;
				$func =~ tr/<>//d;
				if ($func !~ m/\.\(.*\)\./) {
					# This doesn't look like a Go method name (such as
					# "net/http.(*Client).Do"), so everything after the first open
					# paren (that is not part of an "(anonymous namespace)") is
					# just noise.
					$func =~ s/\((?!anonymous namespace\)).*//;
				}
				# now tidy this horrible thing:
				# 13a80b608e0a RegExp:[&<>\"\'] (/tmp/perf-7539.map)
				$func =~ tr/"\'//d;
				# fall through to $tidy_java
			}

			$func .= "_[i]" if scalar(@inline) > 0; #inlined
			push @inline, $func;
		}

		unshift @stack, @inline;
	} else {
		warn "Unrecognized line: $_";
	}
}

dump_stacks();
if ($trace_event ne "") {
    dump_trace(1);
}
finalise();

sub dump_stacks {
    my $telapsed = $time-$start_time;
    my $opp = '';
    for my $event (keys %collapsed) {
        my $filename = "$output_file\_$event";
        if (exists $files{$filename}) {
            $opp = '>>';
        }
        else {
            $opp = '>';
            $files{$filename} = 1;
        }

        open(my $fh, $opp, $filename) or die;
        my $t = sprintf("%.2f", $nt*$dt);
        print $fh "t=$t\n";
        for my $k (@{$order{$event}}) {
            print $fh "$k $collapsed{$event}{$k}\n";
        }
        close($fh);
    }
    $nt += 1;
    %collapsed = ();
    %order = ();
}

sub finalise {
	for my $filename (keys %files) {
		my $telapsed = $time-$start_time;
        open(my $fh, '>>', $filename) or die;
        my $t = sprintf("%.2f", $telapsed);
      #  if (index($filename,"_trace") < 0) {
        print $fh "t=$t\n";
      #  }
        close($fh);
    }
}